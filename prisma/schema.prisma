generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Users {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  npm       String    @unique
  fullname  String
  password  String?
  verifCode String?
  studyId   String    @db.ObjectId
  ukmId     String?   @db.ObjectId
  role      Role      @default(User)
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  votes     Votes[]

  studyProgramOrPosition StudyOrPosition @relation(fields: [studyId], references: [id])
  ukm                    Ukm?            @relation(fields: [ukmId], references: [id])

  @@map("users")
}

model StudyOrPosition {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  users     Users[]

  @@map("study_or_position")
}

model Ukm {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  users     Users[]

  @@map("ukms")
}

model Elections {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  type          ElectionType
  eligibilityId String       @db.ObjectId
  startDate     DateTime
  endDate       DateTime
  createdAt     DateTime     @default(now())
  updatedAt     DateTime?    @updatedAt
  candidates    Candidates[]
  votes         Votes[]

  eligibility Eligibility @relation(fields: [eligibilityId], references: [id])

  @@map("elections")
}

model Eligibility {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  createdAt DateTime    @default(now())
  updatedAt DateTime?   @updatedAt
  elections Elections[]

  @@unique([name])
  @@map("eligibility")
}

model Candidates {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  vision      String
  mission     String
  image       String
  voteCount   Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
  electionsId String    @db.ObjectId
  elections   Elections @relation(fields: [electionsId], references: [id], onDelete: Cascade)
  votes       Votes[]

  @@map("candidates")
}

model Votes {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  electionId  String   @db.ObjectId
  candidateId String   @db.ObjectId
  voteAt      DateTime @default(now())

  user      Users      @relation(fields: [userId], references: [id])
  election  Elections  @relation(fields: [electionId], references: [id], onDelete: Cascade)
  candidate Candidates @relation(fields: [candidateId], references: [id], onDelete: Cascade)

  @@unique([userId, electionId])
  @@map("votes")
}

enum Role {
  User
  Admin
}

enum ElectionType {
  BEM
  Himpunan
  UKM
}
